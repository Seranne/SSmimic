{
    "collab_server" : "",
    "contents" : "---\ntitle: \"MIMIC Pain Level Analysis\"\nauthor: \"Erik Doty\"\ndate: \"February 17, 2017\"\noutput:\n  html_document: default\n  pdf_document: default\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\nlibrary(ggplot2)\nlibrary(mgcv)\nlibrary(dplyr)\n# install.packages(\"RPostgreSQL\") ##Install package if needed\nrequire(\"RPostgreSQL\")\nlibrary(stringr)\n```\n\n## Background\nThe following markdown is designed to search through the mimic database and find all patients who underwent CABG procedure. These patients will be found using CPT codes. The corresponding patients and there associated pain levels will also be searched for. We will use the MIMIC database to find additional factors such as medications used to sedate the pateint, surgical complications. Our goal is to see if these pain levels are potentially associated with worse patient outcomes. The outcomes of interest are hospital length of stay, 30 day mortality rate, and 1 year mortality rate. \n\n## Analysis Table Build\nThe first chunk of code allows R to conenct to MIMIC database \n```{r echo = F}\n# loads the PostgreSQL driver\ndrv <- dbDriver(\"PostgreSQL\") \n# creates a connection to the postgres database (MIMIC)\n# note that \"con\" will be used later in each connection to the database\ncon <- dbConnect(drv, dbname = \"mimic\",\n                 host = \"localhost\", port = 5432,\n                 user = \"postgres\", password = \"postgres\") # password and username were specific to my \n                                          # computer, removed here\n\ndbGetQuery(con, \"set search_path to mimiciii\")\n```\n\nThe following code chunks use tables derived from the MIMIC database to create a dataframe with all the variables of interest for each patient.\n\nSearch through d_items table to derive how pain is recorded in MIMIC\n```{r echo = T}\n#pain_items <- items <- dbGetQuery(con, \"select * from d_items where label like  '%pain%' or label like '%Pain%'\")\n#pain_items\n```\nLooking at the table these are the following item_ids that will be used to obtain pain level from the chartevents tables: 1044(Pain Level), 1045(Pain Level/Response), 225813(Baseline pain level), 224409, 227881 (Pain (0-10)), 223791 (Pain Level)\n\nSelects all those pain levels from the chartevents table and convert all measures to the same format\n```{r echo = T}\npain_table <- dbGetQuery(con, \"select * from mimiciii.chartevents where itemid  in (1044, 1045, 225813, 224409, 227881, 223791)\")\nfor(i in 1:nrow(pain_table)){\n  if(length(\n  unique(na.omit(as.numeric(unlist(strsplit(unlist(pain_table$value[i]), \n                                            \"[^0-9]+\")))))) == 1){\n    pain_table$valuenum[i] <- unique(na.omit(as.numeric(unlist(strsplit(unlist(pain_table$value[i]), \n                                                                 \"[^0-9]+\")))))\n  }\n  if(length(\n    unique(na.omit(as.numeric(unlist(strsplit(unlist(pain_table$value[i]), \n                                              \"[^0-9]+\")))))) == 2){\n                      pain_table$valuenum[i] <- 0\n                                              }\n}\n\nhead(pain_table)\nqplot(x = valuenum, data = pain_table, geom = \"histogram\") + ggtitle(\"Pain level Hist\")\n```\n\nCreates table of all ICU stays for CABG pts and formats to later be merged\n```{r echo=T}\nicu_stay_table <- dbGetQuery(con, \"select subject_id, hadm_id, icustay_id, intime, los from icustays\")\n\ncolnames(icu_stay_table) <- c(\"subject_id\", \"hadm_id\", \"icustay_id\", \"icu_los\")\n\nventduration <- dbGetQuery(con, \"select icustay_id, duration_hours from ventdurations\")\n\n## Add ventdurations to icu_stay_table\nicu_stay_table$ventdur <- NA # Create ventduration column\nfor(i in 1:nrow(icu_stay_table)){\n  if(!length(ventduration$duration_hours[which(ventduration$icustay_id == icu_stay_table$icustay_id[i])]) == TRUE){icu_stay_table$ventdur[i] <- 0} # If not ventilated prior to icu admission\n  else{icu_stay_table$ventdur[i] <- ventduration$duration_hours[which(ventduration$icustay_id == icu_stay_table$icustay_id[i])]}\n}\n\n# Aggregate data in ICU stays to be total length of ICU stay. Will accomplish\n# Using sum function. Necessary as icu_stay_table contains multiple ICU admissions\n# Some patients were most likely readmitted to ICU\nicu_stay_table <- aggregate(cbind(ventdur,icu_los)~hadm_id, data = icu_stay_table, sum)\n\n```\n\nCreate CPT code table, and aggregate by admission\n```{r echo=T}\nCPT.codes <- dbGetQuery(con, \"select hadm_id, cpt_number from cptevents\")\nCPT.codes <- aggregate(cpt_number ~ hadm_id, data = CPT.codes, toString)\n```\n\nCreate a table of all patient ages, another variable that will need to be controlled for\n```{r echo = T}\nage.table <- dbGetQuery(con, \"select subject_id, hadm_id, age, gender,ethnicity\n                              from icustay_detail\")\n# Remove duplicates\nage.table <- age.table[-which(duplicated(age.table$hadm_id)),]\n```\n\nTotal sample size\n```{r echo = T}\nlength(unique(pain_table$hadm_id)) # All CABG patients\n```\n\nCalculate mean, median, and max pains for patient  hospital stay. Return histogram of findings\n```{r echo = T}\navg.pain <- aggregate(valuenum ~ hadm_id, data = pain_table, mean)\ncolnames(avg.pain) = c(\"hadm_id\", \"mean.pain\")\nqplot(x = round(mean.pain), data = avg.pain, geom = \"histogram\") + ggtitle(\"Avg Pain level Hist\")\n\nmax.pain <- aggregate(valuenum ~ hadm_id, data = pain_table, max)\ncolnames(max.pain) = c(\"hadm_id\", \"max_pain\")\nmax.pain$max_pain <- as.numeric(max.pain$max_pain)\nqplot(x = max_pain, data = max.pain, geom = \"histogram\") + ggtitle(\" Max Pain level Hist\")\n\nmed.pain <- aggregate(valuenum ~ hadm_id, data = pain_table, median)\ncolnames(med.pain) = c(\"hadm_id\", \"med.pain\")\nmed.pain$med.pain <- as.numeric(med.pain$med.pain)\n\nqplot(x = med.pain, data = med.pain, geom = \"histogram\")\n```\n\nCreate admission data table, will be used to calculate length of stay and mortality rates\n```{r echo=T}\nadm_table <- dbGetQuery(con, \"select subject_id, hadm_id, admittime, dischtime, hospital_expire_flag from admissions\")\n# Creates new column that will be the total hospital length of stay\nadm_table$hosp_los <- NA\n# For loop calculates length of stay\nfor(i in 1:nrow(adm_table)){\n  adm_table$hosp_los <- as.numeric(difftime(adm_table$dischtime,\n                        adm_table$admittime, units = \"days\"))}\n\n```\n\nExtracting OASIS scores from MIMIC\n```{r echo = T}\noasis <- dbGetQuery(con, \"select subject_id, oasis from oasis\")\n\n# Eliminates duplicates in oasis\noasis <- oasis[-which(duplicated(oasis$subject_id)),]\n```\n\nSort through MIMIC for mentions of Nausea \n```{r echo = T}\n# install.packages(\"stringr\")\nlibrary(stringr)\n\n# Table of all free written notes\nCABGnotes <- dbGetQuery(con, \"select * from noteevents\")\n\n# Only Nursing notes\nnursing.notes <- CABGnotes[grep(\"Nursing\", CABGnotes$category),]\nnursing.notes$text <- tolower(nursing.notes$text) # convert all text to lower case\nnursing.notes <- nursing.notes[,c(3,11)] # Take only hadm_id and text\nnursing.notes <- aggregate(text ~ hadm_id, data = nursing.notes, toString)\n\n# Search for mention of nausea\nn <- which(grepl(\"nausea\", nursing.notes$text) & !grepl(\"no nausea\", nursing.notes$text) & !grepl(\"denies nausea\", nursing.notes$text)& !grepl(\"- nausea\", nursing.notes$text)& !grepl(\"-nausea\", nursing.notes$text)& !grepl(\"neg nausea\", nursing.notes$text))\nn2 <- which(grepl(\"nauseous\", nursing.notes$text)& !grepl(\"not nauseous\", nursing.notes$text))\nnausea.idx <- unique(c(n, n2))\nlength(nausea.idx)\nnausea.table <- data.frame(hadm_id = NA, nausea = NA)\nnausea.table[1:nrow(nursing.notes),] = NA\nnausea.table$hadm_id <- nursing.notes$hadm_id\n\nnausea.table$nausea[nausea.idx] <- 1\nnausea.table$nausea[-nausea.idx] <- 0\n\nnausea.ce <- dbGetQuery(con, \"select * from chartevents where itemid in (1430, 1922, 1932, 6852, 224676, 223805)\" )\n\nhead(nausea.ce)\n\nnausea.ce <- aggregate(value ~ hadm_id, data = nausea.ce, toString)\nnausea.ce$value <- tolower(nausea.ce$value)\n\nnausea.tab2 <- data.frame(hadm_id = NA, nausea = NA)\nnausea.tab2[1:nrow(nausea.ce),] = NA\nnausea.tab2$hadm_id <- nausea.ce$hadm_id\nnausea.idx2 <- which(grepl(\"mild\", nausea.ce$value) | grepl(\"intense\", nausea.ce$value))\nnausea.tab2$nausea[nausea.idx2] <- 1 \nnausea.tab2$nausea[-nausea.idx2] <- 0\nsum(nausea.tab2$nausea)\nnausea.table <- rbind(nausea.table, nausea.tab2)\nnausea.table <- nausea.table[-which(duplicated(nausea.table$hadm_id)),]\n```\n\n\nSort through discharge notes for mentions of delirium\n```{r echo = T}\n# install.packages(\"stringr\")\nlibrary(stringr)\nCABGnotes <- dbGetQuery(con, \"select * from noteevents\")\ndistcabg <-  aggregate(text ~ hadm_id, data = CABGnotes, toString)\nnursing.notes <- CABGnotes[grep(\"Nursing\", CABGnotes$category),]\nnursing.notes$text <- tolower(nursing.notes$text) # convert all text to lower case\nnursing.notes <- nursing.notes[,c(3,11)] # Take only hadm_id and text\nnursing.notes <- aggregate(text ~ hadm_id, data = nursing.notes, toString)\n\n\n\n# Search for mention of delirium\nx <- which(grepl(\"delirium\", nursing.notes$text) & !grepl(\"not delirium\", nursing.notes$text) & !grepl(\"- delirium\", nursing.notes$text))\nx2 <- which(grepl(\"delirious\", nursing.notes$text))\nx3 <- which(grepl(\"confused\", nursing.notes$text) & !grepl(\"not confused\", nursing.notes$text))\nx4 <- which(grepl(\"confusion\", nursing.notes$text) & !grepl(\"no confusion\", nursing.notes$text))\n\ndel.idx <- unique(c(x,x2,x3,x4))\nlength(del.idx)\ndelirium.table <- data.frame(hadm_id = NA, delirium = NA)\ndelirium.table[1:nrow(nursing.notes),] = NA\ndelirium.table$hadm_id <- nursing.notes$hadm_id\n\ndelirium.table$delirium[del.idx] <- 1\ndelirium.table$delirium[-del.idx] <- 0\n\n# Add delirium assessment from chartevents table\ndelirium.assessment <- dbGetQuery(con, \"select * from chartevents where itemid = 228332\")\n\n\ndel_table <- data.frame(hadm_id = NA, delirium = NA)\ndel_table[1:81,] <- NA\ndel_table$hadm_id <- unique(delirium.assessment$hadm_id[which(delirium.assessment$value == \"Positive\")])\ndel_table$delirium <- 1\ndelirium.table <- rbind(del_table, delirium.table)\n\nsum(delirium.table$delirium)\n```\n\n\nElixhauser score \n```{r echo = T}\nelix <- dbGetQuery(con, \"select * from mimiciii.elixhauser_ahrq_no_drg_all_icd\")\n\nelix$e_score <- apply(elix[,3:32], 1, sum)\n```\n\nDistinguish between on vs off pump procedures by using ICD 9 code (3961)\n```{r echo = T}\np_icd <-  dbGetQuery(con, \"select * from mimiciii.procedures_icd\")\n\npump <- data.frame(hadm_id = unique(p_icd$hadm_id), pump = NA)\n\non.off.fun <- function(x){\n  if(3961 %in% p_icd$icd9_code[which(p_icd$hadm_id == pump$hadm_id[x])] == T){\n    return(1)}\n  if(3961 %in% p_icd$icd9_code[which(p_icd$hadm_id == pump$hadm_id[x])] == F){\n    return(0)}}\n\nfor(i in 1:nrow(pump)){\n  pump$pump[i] = on.off.fun(i)\n}\n\n#Proportion of procedures on pump vs off\nsum(pump$pump/nrow(pump)) # 96% of procedures were on pump\n```\n\nSelect all the GCS values in MIMIC. GCS recorded differently if metavision or carvue system. carevue recorded total GCS, metavision recorded individual category scores. Select Mean, med, max\n```{r echo = T}\n# Carevue\nGCS_table1 <- dbGetQuery(con, \"select hadm_id, value from chartevents where itemid = 198\")\n\n# Metavision\nGCS_table2 <- dbGetQuery(con, \"select * from chartevents where itemid in (220739, 223900, 223901)\")\n\n# Following chunck used to sum all GCS categories in GCS_table2 to gather total scores. Collects also \nGCS_table2 <- GCS_table2 %>% group_by(hadm_id, charttime) %>% summarise(sum(valuenum), length(valuenum))\n\n# Eliminate unnecessarty columns and incomplete measurements of GCS\nGCS_table2 <- GCS_table2[which(GCS_table2$`length(valuenum)` == 3),c(-2, -4)]\ncolnames(GCS_table2) <- c(\"hadm_id\", \"value\")\nGCS_table2 <- as.data.frame(GCS_table2)\n\nGCS_table1$value <- as.numeric(GCS_table1$value)\n#Combine into single GCS table\nGCS <- bind_rows(GCS_table1, GCS_table2)\n\nGCS_agg <- GCS %>% group_by(hadm_id) %>% summarise(mean(value), min(value), max(value))\ncolnames(GCS_agg) <- c(\"hadm_id\", \"mean.GCS\", \"min.GCS\", \"max.GCS\")\n```\n\nMerge all tables into one main.table, will be used to run analysis\n```{r echo = T}\nmain.table <- merge(x = icu_stay_table, y = avg.pain, \n                    all.x = F, all.y = T)\nmain.table <- merge(x = max.pain, y = main.table, all.x = F, all.y = T)\nmain.table <- merge(x = age.table, y = main.table, all.x = F, all.y = T)\nmain.table <- merge(x = CPT.codes, y = main.table, all.x = F, all.y = T)\nmain.table <- merge(x = main.table, y = adm_table[,c(2,3,5,6)], all.x = T, all.y = F)\nmain.table <- merge(x = main.table, y = oasis, all.x = T, all.y = F)\nmain.table <- merge(x = main.table, y = elix[,c(2,33)], all.x = T, all.y = F)\nmain.table <- merge(x = main.table, y = pump, all.x = T, all.y = F)\n\n# Add GCS table\nmain.table <- merge(x = main.table, y = GCS_agg, all.x = T, all.y = F)\n\n\n# Sets pts >89 yo (300 yo in database) to the median of 91.4\nmain.table$age[which(main.table$age > 300)] <- 91.4\n\nmain.table <- merge(x = med.pain, y = main.table, all.x = T, all.y = F)\nmain.table <- merge(x = main.table, y = nausea.table, all.x = T, all.y = F)\nmain.table$nausea[which(is.na(main.table$nausea))] <- 0\n\nmain.table <- merge(x = main.table, y = delirium.table, all.x = T, all.y = F)\nmain.table$delirium[which(is.na(main.table$delirium))] <- 0 # assume NA values which had no mention of delirium in notes or \n```\n\nCalculating 30 day and 1 year mortality\n```{r echo = T}\nCABGpatient_table <- dbGetQuery(con, \"select subject_id, dod, expire_flag from patients\")\n\n# Function caluculates number of days to death\nmortality.days.fun <- function(x){\nas.numeric(difftime(CABGpatient_table$dod[which(CABGpatient_table$subject_id == \n                              main.table$subject_id[x])],\nadm_table$dischtime[which(adm_table$subject_id == \n                            main.table$subject_id[x])], units =\"days\"))\n}\n\n\nmain.table$'30_day' <- NA # Initializes 30 day mortality column\nmain.table$'1_yr' <- NA # Initializes 1 year mortality column\n\n#30 day loop\n# 0 if died with in 30 days, 1 if not\nfor(i in 1:nrow(main.table)){\n  # First if statement: \n  # If the patient has not yet, expired, enters 0 for 30 day\n  # Necessary to avoid NA statements in the proceding if statements\n  if(CABGpatient_table$expire_flag[which(CABGpatient_table$subject_id == \n                                         main.table$subject_id[i])] == 0){\n    main.table$`30_day`[i] <- 0\n  }\n  else{\n    \n    # Following if statement:\n    # If patient expired in hosptial, marks 30 day and 1yr mortality \n     #in Main.table\n    \n    if(main.table$hospital_expire_flag[i] == 1){\n      main.table$`30_day`[i] <- 1\n      }\n    \n    # Following if statements:\n    # Calculates time between discharge and time of expiration\n    \n    # First if statement:\n    # If DOD less than thirty days from discharge markes 1 in 30 day and 1 yr mortality in \n    # Main.table\n    \n    if(mortality.days.fun(i) <= 30){\n      main.table$`30_day`[i] <- 1\n    }\n\n    # Following else statement encompasses patients that expired after 30 days\n    else{\n      main.table$`30_day`[i] <- 0\n    }  \n  }\n}\n\n# 1 yr loop\n# For loop to calculate 1 year mortality and store in main table as \n# binary (1 if expire w/in 365 days; 0 if no)\n\nfor(i in 1:nrow(main.table)){\n  # First if statement: \n  # If the patient has not yet, expired, enters 0 in 1 yr mortality\n  # Necessary to avoid NA statements in the proceding if statements\n if(CABGpatient_table$expire_flag[which(CABGpatient_table$subject_id == \n                                         main.table$subject_id[i])] == 0){\n    main.table$`1_yr`[i] <- 0  \n  }\n  else{\n    \n    # Following if statement:\n    # If patient expired in hosptial, marks 30 day and 1yr mortality \n    # in Main.table\n    \n    if(main.table$hospital_expire_flag[i] == 1){\n    main.table$`1_yr`[i] <- 1}\n    \n    # Following if statements:\n    # Calculates time between discharge and time of expiration\n    \n    # First if statement:\n    # If DOD less than 365 from discharge markes 1 in 1 yr mortality in \n    # Main.table\n    \n    if(mortality.days.fun(x = i) <= 365){\n      main.table$`1_yr`[i] <- 1                            \n    }\n    \n    # Following else statement encompasses patients that expired after 1 year\n    else{\n      main.table$`1_yr`[i] <- 0 \n    }  \n  }\n}\n```\n\nMain Table\n```{r echo = F}\nwrite.csv(main.table, \"./main.table.csv\")\n\nhead(main.table)\n\nqplot(main.table$ventdur, shape = \"histogram\", binwidth = 12) # Histogram of ventilation durations\nlength(which(main.table$ventdur <= 24)) # Number of cases where vent duration is less than 24 hrs, 821\nqplot(main.table$age, shape = \"histogram\", binwidth = 1)\nqplot(round(main.table$mean.pain), shape = \"histogram\")\n\n# Save hadm_id from cohort to use in medication extraction\nwrite.csv(main.table$hadm_id, \"./cohort_hadmi_id.csv\")\n\n```\n",
    "created" : 1512143985195.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "369165470",
    "id" : "99F5C2B4",
    "lastKnownWriteTime" : 1511399634,
    "last_content_update" : 1511399634,
    "path" : "~/SSmimic/Cohort/PainProjectSS.Rmd",
    "project_path" : "Cohort/PainProjectSS.Rmd",
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}